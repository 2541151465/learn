diff -urN ./source_code/uvc_driver.c ./kernel_uvc/uvc_driver.c
--- ./source_code/uvc_driver.c	2018-04-08 18:39:59.470947664 -0700
+++ ./kernel_uvc/uvc_driver.c	2018-03-12 02:33:02.729471900 -0700
@@ -2100,6 +2100,28 @@
  * though they are compliant.
  */
 static struct usb_device_id uvc_ids[] = {
+	/*iPassion USB Web Camera */
+    { .match_flags = USB_DEVICE_ID_MATCH_DEVICE
+                      | USB_DEVICE_ID_MATCH_INT_INFO,
+    .idVendor = 0x1B3B,
+    .idProduct = 0x2970,/*If you use iP2977, then type "0x2977" */                  
+    .bInterfaceClass = USB_CLASS_VIDEO,
+    .bInterfaceSubClass = 1,
+    .bInterfaceProtocol = 0,
+    .driver_info = UVC_QUIRK_PROBE_MINMAX
+                     | UVC_QUIRK_IGNORE_SELECTOR_UNIT},
+
+    /*iPassion USB Web Camera */
+    { .match_flags = USB_DEVICE_ID_MATCH_DEVICE
+                      | USB_DEVICE_ID_MATCH_INT_INFO,
+    .idVendor = 0x1B3B,
+    .idProduct = 0x2977,/*If you use iP2977, then type "0x2977" */                  
+    .bInterfaceClass = USB_CLASS_VIDEO,
+    .bInterfaceSubClass = 1,
+    .bInterfaceProtocol = 0,
+    .driver_info = UVC_QUIRK_PROBE_MINMAX
+                     | UVC_QUIRK_IGNORE_SELECTOR_UNIT},
+					 
 	/* LogiLink Wireless Webcam */
 	{ .match_flags		= USB_DEVICE_ID_MATCH_DEVICE
 				| USB_DEVICE_ID_MATCH_INT_INFO,
diff -urN ./source_code/uvc_video.c ./kernel_uvc/uvc_video.c
--- ./source_code/uvc_video.c	2018-04-08 18:39:59.470947664 -0700
+++ ./kernel_uvc/uvc_video.c	2018-03-12 03:05:40.922665570 -0700
@@ -969,7 +969,7 @@
 static int uvc_video_decode_start(struct uvc_streaming *stream,
 		struct uvc_buffer *buf, const __u8 *data, int len)
 {
-	__u8 fid;
+	static __u8 fid;
 
 	/* Sanity checks:
 	 * - packet must be at least 2 bytes long
@@ -981,7 +981,26 @@
 		return -EINVAL;
 	}
 
-	fid = data[1] & UVC_STREAM_FID;
+	/* ip2970/ip2977 */
+    if (stream->dev->udev->descriptor.idVendor == 0x1B3B)
+    {
+        if ( len >= 16 ) // have data in buffer
+        {
+            // 資料必須從data[12]開始判斷，是因為前面的資料是封包專用
+            if ( (data[12]==0xFF && data[13]==0xD8 && data[14]==0xFF) ||
+                (data[12]==0xD8 && data[13]==0xFF && data[14]==0xC4)) 
+            {
+                if(stream->last_fid)
+                    fid &= ~UVC_STREAM_FID;
+                else
+                    fid |= UVC_STREAM_FID;
+            }
+        }
+    }
+    else
+    {
+    	fid = data[1] & UVC_STREAM_FID;
+    }	
 
 	/* Increase the sequence number regardless of any buffer states, so
 	 * that discontinuous sequence numbers always indicate lost frames.
@@ -1072,6 +1091,14 @@
 static void uvc_video_decode_data(struct uvc_streaming *stream,
 		struct uvc_buffer *buf, const __u8 *data, int len)
 {
+	
+	// 要修改影像資料，必須先宣告一個特別型態的指標變數，才能正確存取記憶體中的資料
+    unsigned char *point_mem;
+    static unsigned char *mem_temp = NULL;
+
+    // 初始化暫存用的記憶體位置
+    static unsigned int nArrayTemp_Size = 1000;
+	
 	unsigned int maxlen, nbytes;
 	void *mem;
 
@@ -1085,6 +1112,28 @@
 	memcpy(mem, data, nbytes);
 	buf->bytesused += nbytes;
 
+	/* ip2970/ip2977 */
+    if (stream->dev->udev->descriptor.idVendor == 0x1B3B)
+    {
+        if(mem_temp == NULL) {
+            mem_temp = kmalloc(nArrayTemp_Size, GFP_KERNEL);
+        }
+        else if(nArrayTemp_Size <= nbytes){ // 當收到的資料長度大於上一次的資料長度，則重新分配所需的空間+
+            kfree(mem_temp);
+            nArrayTemp_Size += 500;
+            mem_temp = kmalloc(nArrayTemp_Size, GFP_KERNEL);
+        }
+        memset(mem_temp, 0x00, nArrayTemp_Size);
+        
+        // 指向資料儲存的記憶體位置
+        point_mem = (unsigned char *)mem;
+        if( *(point_mem) == 0xD8 && *(point_mem + 1) == 0xFF && *(point_mem + 2) == 0xC4){
+            memcpy( mem_temp + 1, point_mem, nbytes);
+            mem_temp[0] = 0xFF;
+            memcpy( point_mem, mem_temp, nbytes + 1);
+        }
+    }
+	
 	/* Complete the current frame if the buffer size was exceeded. */
 	if (len > maxlen) {
 		uvc_trace(UVC_TRACE_FRAME, "Frame complete (overflow).\n");
