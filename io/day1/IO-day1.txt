IO 进程课程属于：Linux 下高级编程，也称为Linux系统编程。

1. 为什么要学Linux 下高级编程？
	Linux 下高级编程课程的学习：了解内核的强大功能
		1、文件管理
		2、进程管理
		3、网络管理
		4、设备管理
		5、内存管理

		目的：驱动程序学习打下基础

2. 怎样学Linux 下高级编程？
	Linux 下高级编程的特点：涉及到内核向用户空间提供的接口（函数）。
 
3. 为什么内核要提供这些接口呢？
	主要原因：
	A：内核要为应用程序服务，应用程序如果没有内核服务，则应用程序功能非常单一。
	B：内核是一个稳定的代码，同时也要为多个用户空间的程序服务，为了防止用户空间的某些用户程序使内核代码崩溃或产生其它问题，从而不能为其它用户服务。

	所以：内核向用户空间提供的接口（函数），在这些接口函数中加上一些保护，这样会使符合接口函数的应用提供服务，同时也保护内核。


4. 这一阶段主要涉及哪些相关课程：

IO：
	文件IO
	标准IO
	目录IO
进程：
	进程控制
	线程（线程的控制，线程的同步与互斥）
	进程通信（无名管道，有名管道，信号，IPC（共享内存，消息队列，信号灯））
	====》一台机器上进程之间的通信。


网络：进程通信，它是一个网络中多台机器之间的进程之间的通信。



IO：input output   实现

课程目标：

（一）文件的概念和类型（了解）
	概念：在文件系统当中对数据的一种组织（信息的载体，存储不同类型的数据）。
	文件名：
		通过绝对路径或者相对路径的方式找到文件。

	文件类型：bcd-lsp
		普通文件：
			文本文件：
			二进制文件：编译之后的文件
		目录文件：创建文件或者是子目录

		设备文件：
			b
			c
		链接文件：

		管道文件：

		套接字文件：

（二）如何理解标准IO（了解）
	标准IO：标准的C语言库当中提供的一些用于输入输出的函数
	
		特点：通过缓冲机制减少系统调用，从而提高读写效率

（三）流（FILE）的含义（了解）
		文件指针  FILE*  

（四）流的缓冲类型(熟练)
	1、全缓冲
		对文件操作
			条件：
				缓冲区满   4096字节
				程序正常结束；
				使用刷新函数进行输入输出fflush
	2、行缓冲
		对终端操作
			条件：
				缓冲区满   1024字节
				程序正常结束；
				使用刷新函数进行输入输出fflush	
				使用‘\n’		
	3、无缓冲
		对终端操作
	先测试缓冲问题的程序： 
		
	缓冲类型：




	标准输入流stdin、标准输出流stdout、标准出错流stderr

*********标准IO相关函数操作*********：
man  1 ps
man  2 open
man  3 fopen

1、流的打开
	FILE *fopen(const char *path, const char *mode);
	功能：打开或者创建文件
	参数：
	r  
	打开文件，对文件进行读，文件必须存在
	r+
	打开文件，对文件可读可写，文件必须存在
	w
	打开文件，对文件进行写，
	如果文件不存在，则创建文件；如果存在，则清空文件内容
	w+
	打开文件，对文件可读可写，
	如果文件不存在，则创建文件；如果存在，则清空文件内容
	a
	打开文件，对文件追加写
	如果文件不存在，则创建文件；如果存在，从文件末尾位置写
	a+
	打开文件，对文件从开始位置读，末尾位置追加写
	如果文件不存在，则创建文件；如果存在，从文件末尾位置写

返回值：
	成功  文件指针
	失败  NULL

2、流的关闭

	文件权限掩码屏蔽  umask
		系统给定权限0666
		最终文件权限0666&（~umask）

	练习题：
		测试打开文件的最大个数？
		3-fopen_max.c

3、不同的读写方式

	（1）按字符读、写
		fgetc/fputc

		int fgetc(FILE *stream);
		功能：从指定的stream中读取内容
		参数： stream代表用fopen打开的文件，返回的文件指针
				或者是操作系统打开的stdin
		返回值：
			成功  返回读取到的字符
			失败  返回 EOF

		int fputc(int c,FILE *stream);
		功能：往指定的stream中写入内容
		参数： stream代表用fopen打开的文件，返回的文件指针
				或者是操作系统打开的stdout
		返回值：
			成功  返回 写入的字符
			失败  返回 EOF(-1)		

		练习题：			
			读操作：
				1、从标准输入中读入数据并输出到标准输出
				2、从文件中读入数据并输出到标准输出
				3、实现cat命令，从文件中读入数据，然后输出到标准输出
				4、测试一个文件中的行数

			写操作：
				1、	fputc输出数据到标准输出
				2、实现cp命令，从一个文件中读入数据，然后输出到另外一个文件中

	（2）按行读、写
		fgets/fputs
		char *fgets(char *s, int size, FILE *stream);
		功能：从stream流读取size字符存储到s指向的缓冲区

		返回值：失败  NULL
			注意：
			1、假设文件中一行的数据超过size个，fgets函数会读取这一行中的size-1个，最后一个
			存储'\0'
			2、假设文件中的输少于size-1，fgets会读取字符，遇到'\n'结束，并且会读取'\n',把'\n'存储到buf中。
		
		int fputs(const char *s, FILE *stream);
		功能：把s指向的数据输出到stream中
			fputs不自带换行
		返回值：
			失败：  EOF
			练习题：
				1、实现在标准输入、标准输出的循环读写
				2、实现文件中读入数据，输出到标准输出
				3、用fgets实现cp命令，从文件中读入数据，然后输出到另一个文件中

	（3）二进制读、写
			fread/fwrite
			size_t  fread（void *ptr，size_t size, size_t nmemb, FILE* stream）
			功能：
			从stream指向的文件中读取nmemb个对象，每个对象的大小是size个字节，存放到ptr指向的数组中（首先定义一个数组）

			size_t  fwrite（void *ptr，size_t size, size_t nmemb, FILE* stream）
			功能：往stream指向的文件中写入nmemb个对象，每个对象的大小是size个字节，从ptr指向的数组中读取（首先定义一个数组）


			练习题：
				1、利用实现fread/fwrite的使用
				2、利用fread/fwrite读写文件的读写操作（cp命令）

4、流的相关其他操作

	（1）刷新流  fflush

	（2）定位流  
		ftell
		rewind
		fseek
			int fseek(FILE *stream, long offset, int whence);
			功能：对文件访问位置重新定位
			参数：
				stream  打开的文件
				whence  基准点，也就是从哪个位置开始进行偏移
				offset  偏移量，往文件的前后位置偏移的字节数是多少？
			返回值：
				成功  0
				失败  -1
		举例:

		fseek(fp, 0, SEEK_SET); 
		  //定位文件位置在开头
		fseek(fp, 1, SEEK_SET);	
		  //定位文件位置从开头往文件末尾偏移一个字节
		fseek(fp, 0, SEEK_CUR);  
		  //定位文件位置从当前位置
		fseek(fp, 1, SEEK_CUR);  
		  //定位文件位置从当前位置往文件末尾偏移1个字节
		fseek(fp, -1, SEEK_CUR);  
		 //定位文件位置从当前位置往文件开头偏移1个字节
		fseek(fp, 0, SEEK_END);   
		 //定位文件位置在末尾
		fseek(fp, 1, SEEK_END);  
		 //定位文件位置从末尾继续往后偏移一个字节
		fseek(fp, -1, SEEK_END); 
		 //定位文件位置从末尾继续往文件开头偏移一个字节

		读写位置









安装ctags追踪工具工具：
	sudo  apt-get install ctags

进入到索引文件目录：

	cd  /usr/include 
	sudo ctags -R 
		举例：  vi  -t  FILE

		使用方式：选择相应的数字所代表的那个头文件，先找熟悉的，如果熟悉的找不到之后再换其他文件进行查看
		
		追踪原型  ctrl + ]   往后追踪
				  ctrl + t   往前追踪
在进入到另外目录：
		sudo  vi  /etc/vim/vimrc   在最后一行添加  set  tags=/usr/include/tags



cd /var/cache/apt/archives 






























