时间编程题目要求：编程读写一个文件test.txt，每隔1秒向文件中写入一行数据，类似这样： 
1,  2007-7-30 15:16:42  
2,  2007-7-30 15:16:43
该程序应该无限循环，直到按Ctrl-C中断程序。
再次启动程序写文件时可以追加到原文件之后，并且序号能够接续上次的序号，比如： 
1,  2007-7-30 15:16:42
2,  2007-7-30 15:16:43
3,  2007-7-30 15:19:02
4,  2007-7-30 15:19:03
5,  2007-7-30 15:19:04

提示：
要追加写入文件，同时要读取该文件的内容以决定下一个序号是几，应该用什么模式打开文件？ 

首先判断一下打开的文件是否为新文件，如果是新文件，就从序号1开始写入；如果不是新文件，则统计原来有多少行，比如有n行，然后从序号n+1开始写入。以后每写一行就把行号加1。 
获取当前的系统时间需要调用函数time()，得到的结果是一个time_t类型，其实就是一个大整数，其值表示从UTC时间1970年1月1日00:00:00（称为UNIX的Epoch时间）到当前时刻的秒钟数。然后调用localtime()将time_t所表示的UTC时间转换为本地时间（我们是+8区，比UTC多8个小时）并转成struct tm类型，该类型的各数据成员分别表示年月日时分秒，请自己写出转换格式的代码，不要使用ctime()或asctime()函数。

具体用法请查阅man page。time和localtime函数需要头文件time.h。 
调用sleep(n)可使程序睡眠n秒，该函数需要头文件unistd.h







文件IO
（一）如何理解文件IO
			操作系统提供的一些用于输入输出的函数（系统调用）

（二）文件描述符的含义

	标准输入 0、 标准输出 1、 标准出错 2

 (三)缓冲：
0、错误处理 errno
	void perror(const char *s);
	功能：打印系统提供的标准错误信息
	参数： 
		s  需要用户自己指定错误信息，写入一个字符串就可以，在自己写的字符串之后，是系统的标准错误信息
1、文件的打开与关闭
	
	open
	当在open函数中flags选项中使用了，O_CREAT选项的时候，要选择三个参数的那个open函数，不指定O_CREAT是选择两个参数的那个open函数

	 int open(const char *pathname, int flags);

     int open(const char *pathname, int flags, mode_t mode);
     功能：创建或者打开文件
     参数：
     	pathname：  打开或者创建文件
     	flags：  
     		下列三者只能选择其中之一：
     		O_RDONLY   只读
     		O_WRONLY   只写
     		O_RDWR     可读可写
     		然后在配合后面的选项一起使用
     		O_CREAT    创建
     		O_EXCL     判断是否重复创建
     		O_TRUNC    清空文件中的内容
     		O_APPEND   从文件末尾追加写入
     		
     		他们的使用方式是

     		举例：
     		O_RDONLY | O_CREAT | O_EXCL | O_APPEND | 
     		O_TRUNC
			
			mode：  指定文件应该有的权限（mode & ~umask）
			用八进制的数字表示：
			举例： 0666

	练习题：
		1、打开、关闭文件
		2、测试文件IO打开的文件个数      1024

2、读、写操作
		
	ssize_t read(int fd, const void *buf, size_t count);
	功能：从fd关联的文件中读取count个字节到buf指向的缓冲区中

	ssize_t write(int fd, const void *buf, size_t count);
	功能：把buf指向的缓冲区中的数据往fd关联的文件中写入count个字节。
	
	注意：
	返回值：  成功返回写入或者读取的字节数
	如果返回值为0，表示已经读取到文件的末尾位置；或者没有写入数据得到文件中

			  失败：  -1
	练习题：
		1、从文件中读出数据，并往文件中写入数据
		2、实现文件的复制操作（cp）

4、定位操作
	off_t lseek(int fd, off_t offset, int whence);
		功能：对文件访问位置重新定位
			参数：
				fd  打开的文件
				whence  基准点，也就是从哪个位置开始进行偏移
				offset  偏移量，往文件的前后位置偏移的字节数是多少？
			返回值：
				成功  0
				失败  -1
		举例:

		lseek(fp, 0, SEEK_SET); 
		  //定位文件位置在开头
		lseek(fp, 1, SEEK_SET);	
		  //定位文件位置从开头往文件末尾偏移一个字节
		lseek(fp, 0, SEEK_CUR);  
		  //定位文件位置从当前位置
		lseek(fp, 1, SEEK_CUR);  
		  //定位文件位置从当前位置往文件末尾偏移1个字节
		lseek(fp, -1, SEEK_CUR);  
		 //定位文件位置从当前位置往文件开头偏移1个字节
		lseek(fp, 0, SEEK_END);   
		 //定位文件位置在末尾
		lseek(fp, 1, SEEK_END);  
		 //定位文件位置从末尾继续往后偏移一个字节
		lseek(fp, -1, SEEK_END); 
		 //定位文件位置从末尾继续往文件开头偏移一个字节		
	练习题：
		1、文件访问位置定位
		2、创建空洞文件

5、目录操作和文件属性
	目录：存储子目录或者文件

	（1）目录操作
		注意：操作目录文件首先要定义一个DIR*类型的结构体指针，把它作为后续操作函数的参数，对文件进行操作

		打开目录文件：opendir

		读取目录文件：readdir
			读取目录文件内容，首先要定义一个struct dirent*类型的指针，方便读取到目录文件中的内容。比如：文件名、节点号等等。

		关闭目录文件：closedir
		

		练习题：
			1、打开目录，并读取目录中的内容

	（2）获取文件属性 ls -l

		练习题：
			
6、库的制作与使用

	（一）库的概念
			可不可以直接执行。
				二进制的文件
				源代码

	（二）静态库
			ar -t  静态库的名字  ----》查看静态库的组成部分
			步骤：
				1、确定函数接口  函数名、参数、功能、返回值

				2、由于库都是有.o文件组成的，需要生成.o文件
					gcc -c add.c -o add.o
					gcc -c sub.c -o sub.o
				3、制作静态库
					ar  crs   libmymath.a add.o sub.o
						静态库以lib为前缀，中间是库的名称，以.a为后缀
						c  创建
						r  插入
						s  索引
				4、把编译好的额静态库中的代码添加到目标程序中
					gcc  main.c -o main  -L . -lmymath
						其中-L指定库的路径，如何找到库  .表示当前目录
							-l表示库的名称，也就是要使用的库是哪个？ mymath

		（1）静态库的创建
		（2）链接静态库	

	（三）动态库
				步骤：
				1、确定函数接口  函数名、参数、功能、返回值

				2、由于库都是有.o文件组成的，需要生成.o文件
					gcc -fPIC -c add.c -o add.o
					gcc -fPIC -c sub.c -o sub.o
						-fPIC  指定位置无关的代码，可以让操作系统把共享库加载到内存中任意位置
				3、制作动态库
					gcc  -shared  -o libmysec.so add.o sub.o
						动态库以lib为前缀，中间是库的名称，以.a为后缀
							-shared  共享
				4、运行时把编译好的共享库中的代码添加到目标程序中
					gcc  main.c -o main  -L . -lmysec
						其中-L指定库的路径，如何找到库  . 表示当前目录
							-l表示库的名称，也就是要使用的库是哪个？ mysec

			三种执行方式：（选择其中一种方式即可）
				1、				/lib   或者  /usr/lib
					sudo cp libmysec.so /usr/lib

				2、修改环境变量 LD_LIBRARY_PATH
					export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/linux/16091/p/dynamic 
						如何删除环境变量中的内容：
						export LD_LIBRARY_PATH=

				3、添加配置文件（以绝对路径的方式添加）
					sudo  vi /etc/ld.so.conf.d/filename.conf
					sudo ldconfig

		（1）共享库创建
		（2）链接共享库
		（3）加载共享库












































